// datasource db {
//   provider = "sqlite"
//   url      = "file:../db/dev.db"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  role          Role      @default(USER)
  status        Status    @default(INACTIVE)
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  password  String
  // twoFactorSecret String? // Optional for 2FA secret
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  keys             Key[]
  activityLogs     ActivityLog[]
  sessionTokens    SessionToken?
  securitySettings SecuritySetting?

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Key {
  id        String  @id @default(uuid())
  userId    String
  keyName   String
  algorithm String
  keySize   Int
  curve     String?
  publicKey String  @db.Text // Use @db.Text for longer strings

  encryptedPrivateKey String   @db.Text // Use @db.Text for longer strings
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  activityLogs ActivityLog[]

  @@index([userId, keyName])
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    String
  keyId     String? // Optional key reference
  action    String
  timestamp DateTime @default(now())
  details   String?

  // Relations
  user User @relation(fields: [userId], references: [id])
  key  Key? @relation(fields: [keyId], references: [id])

  @@index([userId, action, timestamp])
}

model SessionToken {
  id           Int      @id @default(autoincrement())
  userId       String   @unique
  token        String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  isPersistent Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId, expiresAt])
}

model SecuritySetting {
  id                 Int      @id @default(autoincrement())
  userId             String   @unique
  twoFactorEnabled   Boolean  @default(false)
  sessionTimeout     Int      @default(30)
  lastPasswordChange DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}
